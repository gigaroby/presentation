Fun with context
in Go 1.7
13 Sep 2016
Tags: context

Roberto Bampi
Master Student, KTH 
Infrastructure Developer, SpazioDati
bampi.roberto@gmail.com
@gigaroby

* Outline

1. History
2. What context is
3. When to use it
4. Deadline and cancellation
5. Request-scoped data
6. Type safe access
7. Q/(A hopefully)

* Some history

July 2014

- [[https://blog.golang.org/context][Go Concurrency Patterns: Context]]
- Context was open-sourced as golang.org/x/net/context

August 2016 (Go 1.7)

- Context integrated into the standard library as top level package `"context"`
- Also integrated in some standard library packages (I'll talk about this later)
- `Request.WithContext(ctx)` and `Request.Context()` in `net/http` 
- `CommandContext(ctx,name,args)` in `os/exec`

* Let's talk context

    type Context interface {
        // cancellation and deadline
        Deadline() (deadline time.Time, ok bool)
        Done() <-chan struct{}
        Err() error

        // request scoped data
        Value(key interface{}) interface{}
    }

Move request-scoped data, cancellation and deadlines between API boundaries.

Hierachial structure, new contexts are children of a given context.

Heavy use inside Google

    At Google, we require that Go programmers pass a Context parameter as the first argument
    to every function on the call path between incoming and outgoing requests

* Deadline and cancellation

    func FetchThing(ctx context.Context) (*Thing, err) {
        var (
            res = make(chan *Thing, 1)
            f = fetcher{}
        )
        go func() { res <- f.fetch() }()
        select {
            case <- ctx.Done():
                f.cancelTransaction()
                return nil, ctx.Err()
            case t := <- res:
                return t, nil
        }
    }

    // or context.WithDeadline(context.Background(), time.Now().Add(100 * time.Millisecond))
    ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)
    // if FetchThing finishes early, release the context resources
    defer cancel()

    if t, err := FetchThing(ctx); err != nil {
        ...
    }


* Request-scoped data


